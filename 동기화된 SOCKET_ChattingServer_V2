import java.io.*;
import java.net.*;
import java.util.*;

public class ChattingServer {

	public static void main(String[] args) throws Exception {
		ServerSocket serverSocket = null; //실제로 데이터를 주고받는것은 아니고 연결 접속 요구를 기다리고 접속요구에 대해서 실제로 데이터를 주고 받을 소켓을 만들어주는 역할만 한다.  
		System.out.println("서버가 곧 동작을 시작합니다.");
		serverSocket = new ServerSocket(8000); //대기도 아니고 어떤 포트를 점유하겠다라는 정도임 
		System.out.println("서버가 8000번 포트를 점유했습니다."); //클라이언트가 요청을 하더라도 받을 수 있는 준비는 안되었다. 즉 가게를 열기 위해서 터잡고 인테리어는 끝났으나 아직 점원들이 없음. 

	
		System.out.println("서버가 클라이언트의 접속 요청을 기다리고 있습니다.");
		Socket clientSocket = serverSocket.accept(); //요청이 들어오면 클라이언트와 데이터를 주고받을 소켓을 새로 만들어서 주게 되는 메서드 
		System.out.println("서버가 클라이언트의 접속 요청을 받고, 해당 클라이언트를 위한 소켓을 생성했습니다.");
		
		System.out.println("클라이언트와의 송수신을 위한 스트리밍 객체를 생성합니다.");
		BufferedReader receiveString = new BufferedReader(new InputStreamReader(clientSocket.getInputStream())); 
		BufferedWriter sendString = new BufferedWriter(new OutputStreamWriter(clientSocket.getOutputStream()));  
		//getOutputStream, getOutputStream 바이트단위로 데이터 읽어줌
		// 문자단위로 처리할 수 있게 BufferedReader,BufferedWriter사용함,  비트나 바이트 단위의 데이터를 주고받거나 할거면 거기에 맞는 다른것이 존재한다. 
		 
		Scanner keyboardInput = new Scanner(System.in);
		
		//미선언시 오류
		String msg;
		String clientID;
		
		//ID로 채팅 입장에서 비정상적인 부분을 걸러내기 위한 와일문 
		while(true) {
			
			System.out.println("클라이언트로부터 ID 전송을 기다리고 있습니다.");
			msg = receiveString.readLine(); //메세지받는부분 
			
			if(msg.startsWith("<name>"))//네임태그로 들어아야지 시작됨
			{
				int endTagIndex = msg.indexOf("</name>"); //마지막에 닫는네임태그로 왔는지 확인 
				clientID = msg.substring("<name>".length(), endTagIndex-1);
				break;		
			}
			sendString.write("<error>code = 1, msg = name tag를 가진 채팅 아이디를 먼저 보내주셔야 합니다. </error>\n");
			// 에러메세지 보냄 
			sendString.flush(); 
		}
		
		System.out.println(clientID +"님이 채팅을 요청하셨습니다.");
		
		msg = "<msg>반갑습니다 [" +clientID+ "]님</msg>";
		sendString.write(msg + "\n");	
		sendString.flush(); 
		
		//정상적인 입장이 된 와일문. 서버는 클라이언트가 보내는 문자 기다림 
		while(true) {
		
			System.out.println("클라이언트로부터 ID 전송을 기다리고 있습니다.");
			msg = receiveString.readLine();
			
			System.out.println(msg); // 보낸 메세지 
			
			if(msg.startsWith("<quit>")) {//종료를 원하는 태그를 자체 규약으로 사용 
				System.out.println("클라이언트가 채팅 종료를 원하고 있습니다.");
				break; 
			}
			if(!msg.startsWith("<msg>")) { // ! 만약에 msg태그를 동반하여 보내지 않았다면 
				sendString.write("<error>code = 2, msg = msg tag를 가진 메세지가 수신되지 않았습니다. </error>\n");
				sendString.flush(); 
				continue; //그대로 종료가되는것이 아닌 클라이언트한테 다시 보내라
			}
			msg = "<msg>[서버]" +keyboardInput.nextLine()+ "</msg>";
			System.out.println(msg);
			
			sendString.write(msg + "\n"); //클라이언트한테 메세지 보냄 
			sendString.flush(); 
		}
		
		/*
		System.out.println("클라이언트로부터의 데이터 전송을 기다리고 있습니다.");
		String msg = receiveString.readLine(); 
		
		System.out.println("클라이언트가 전송한 데이터는 < " + msg + "> 입니다.");
		Thread.sleep(1000); // 시각적으로 왔다갔다하는 것이 덜 느껴짐으로 1초 쉬게 만듦
		
		System.out.println("클라이언트로 전송 받은 데이터를 송신합니다.");
		sendString.write("echo : " + msg + "\n");
		sendString.flush();
		*/
		
		Thread.sleep(2000); //2초정도 쉬면 클라이언트가 자동으로 접속이 종료될 수도 있어서 클로즈 안해도 될 수도 있다. 
		System.out.println("클라이언트와의 접속을 종료합니다.");
		clientSocket.close();
		System.out.println("서버를 종료합니다.");
		serverSocket.close(); // 서버는 클로우즈 해줘야함. 안그러면 포트를 점유하고 있는 상황이 계속 이루어지기때문에 다른 프로그램에서 문제가 될 수도 있다. 
	
	}
}
